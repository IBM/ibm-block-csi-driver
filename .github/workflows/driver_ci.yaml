name: Driver Build
on:
  push:
    branches:
      - develop
      - master
  pull_request:
    branches:
      - develop
      - master
jobs:
  Prepare_env:
   name: "prepare env"
   runs-on: ubuntu-latest
   steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Setup dependencies
        id: setup_dependencies
        run: |
          scripts/ci/github_actions/driver/setup_ci_dependencies.sh
        env:
          build_number: "${{ github.run_number }}"
      - uses: actions/cache@v2
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-${{ hashFiles('dev-requirements.txt') }}
      - name: Save dependencies files
        uses: actions/upload-artifact@v2
        with:
          name: ci-dependencies
          path: |
            /home/runner/.bash_profile
          retention-days: 1
   outputs:
     docker_image_branch_tag: "${{ steps.setup_dependencies.outputs.docker_image_branch_tag }}"
     driver_images_tag: "${{ steps.setup_dependencies.outputs.driver_images_tag }}"

  CSI-controller-static_code_analysis:
    runs-on: ubuntu-latest
    name: "CSI controller static code analysis"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: CSI-controller- static code analysis
        run: |
          ./scripts/run_static_code_analysis.sh

  Unit_testing_coverage:
    runs-on: ubuntu-latest
    name: "Unit testing + coverage ${{ matrix.csiblock-component }}"
    strategy:
      matrix:
       include:
         - csiblock-component: controller
           command-to-run: "./scripts/run_unitests.sh"
         - csiblock-component: node
           command-to-run: "make test-xunit-in-container"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: CSI-${{ matrix.csiblock-component }}- Unit testing + coverage
        run: |
          mkdir -p build/reports && chmod 777 build/reports
          $command_to_run `pwd`/build/reports
        env:
          command_to_run: ${{ matrix.command-to-run }}

  CSI-deployment-k8s_yamls_validation:
    runs-on: ubuntu-latest
    name: "CSI deployment k8s yamls validation"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: CSI-deployment- k8s yamls validation
        run: |
          ./scripts/run_yamlcheck.sh

  CSI-Build-and-push-images:
    runs-on: ubuntu-latest
    name: "CSI Build and push images"
    needs:
      - CSI-controller-static_code_analysis
      - Unit_testing_coverage
      - CSI-deployment-k8s_yamls_validation
      - Prepare_env
    strategy:
      matrix:
        image_type: ['node', 'controller']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1.3.0
      - uses: FranzDiebold/github-env-vars-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: 'csiblock1'
          password: '${{ secrets.CSIBLOCK_DOCKERHUB_PASSWORD }}'
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-${{ matrix.image_type }}
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Build and push ${{ matrix.image_type }}
        uses: docker/build-push-action@v2
        with:
          context: .
          platforms: linux/amd64,linux/ppc64le,linux/s390x
          push: true
          tags: |
            csiblock1/ibm-block-csi-${{ matrix.image_type }}:${{ needs.Prepare_env.outputs.driver_images_tag }}
            csiblock1/ibm-block-csi-${{ matrix.image_type }}:${{ needs.Prepare_env.outputs.docker_image_branch_tag }}
            csiblock1/ibm-block-csi-${{ matrix.image_type }}:latest
          file: Dockerfile-csi-${{ matrix.image_type }}
          cache-from: type=local,src=/tmp/.buildx-${{ matrix.image_type }}
          cache-to: type=local,dest=/tmp/.buildx-new-${{ matrix.image_type }}
        # Temp fix
        # CSI-3164
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          [[ -G /tmp/.buildx-${{ matrix.image_type }} ]] && rm -rf /tmp/.buildx-${{ matrix.image_type }}
          mv /tmp/.buildx-new-${{ matrix.image_type }} /tmp/.buildx-${{ matrix.image_type }}
