pipeline {
    parameters {
        string(name: 'IMAGE_VERSION', defaultValue: "1.7.0")
        string(name: 'CSI_CONTROLLER_IMAGE', defaultValue: "default")
        string(name: 'CSI_NODE_IMAGE', defaultValue: "ibm-block-csi-driver-node-amd64")
        string(name: 'DOCKER_REGISTRY', defaultValue: "stg-artifactory.haifa.ibm.com:5030")
        string(name: 'EMAIL_TO', defaultValue: "")
        string(name: 'BANDIT_SKIPS', defaultValue: "xavi-system-tests", description: "comma separated list of issues to skip from the bandit python security test.\nB506: https://jira.xiv.ibm.com/browse/CSI-500")
        string(name: 'GOSEC_EXCLUDE', defaultValue: "production", description: "comma separated list of rules to exclude.\nRules are listed here: https://github.com/securego/gosec")
    }
    environment {
        registryCredentialsID = 'csi_w3_user'
    }
    options {
        ansiColor('xterm')
    }
    agent {
        label  "${env.AGENT_LABEL}"
    }
    stages {
        stage ('CSI-controller: static code analysis') {
            steps {
                sh './scripts/run_static_code_analysis.sh'
            }
        }
        stage ('CSI-controller: Unit testing + coverage') {
            steps {
                sh 'mkdir -p build/reports && chmod 777 build/reports'
                sh './scripts/run_unitests.sh `pwd`/build/reports'
            }
        }
        stage ('CSI-node: go local tests') {
            steps {
                sh 'mkdir -p build/reports && chmod 777 build/reports'
                sh 'make test-xunit-in-container'
            }
        }
        stage ('CSI-deployment: k8s yamls validation') {
            steps {
                sh './scripts/run_yamlcheck.sh'
            }
        }
        stage ('CSI-controller & node: Build and push images') {
            steps {
                script {
                    registryUrl = "https://${DOCKER_REGISTRY}"
                    docker.withRegistry(registryUrl, registryCredentialsID) {
                        sh './scripts/ci/build_push_images.sh build/reports/images_url'
                    }
                }
            }
        }
    }
    post {
        always {
            script {
                manager.addShortText("${env.GIT_BRANCH}")
            }
            sh 'ls -la build/reports/'
            junit 'build/reports/*.xml'
            // cobertura coberturaReportFile: 'build/reports/*.xml'   ## TODO: CSI-103 need to run cobertura but it has an issue "No such DSL method"
            archiveArtifacts 'build/reports/images_url'
        }

        failure {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}',
                    to: "${env.EMAIL_TO}",
                    subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        unstable {
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}',
                    to: "${env.EMAIL_TO}",
                    subject: 'Unstable build in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        changed {
            emailext body: 'Check console output at $BUILD_URL to view the results.',
                    to: "${env.EMAIL_TO}",
                    subject: 'Jenkins build is back to normal: $PROJECT_NAME - #$BUILD_NUMBER'
        }

        cleanup {
            script {
                sh '[ -d build/reports ] && rm -rf build/reports'
            }
        }

    }
}
