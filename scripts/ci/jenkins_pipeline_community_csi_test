pipeline {
    agent {
        label 'docker-engine'
    }
    environment {
        CONTROLLER_LOGS = "csi_controller_logs"
        STORAGE_CONF_YAML = "./scripts/ci/storage_conf.yaml"

    }
    /*stage('Environment Setup') {
        env.relative_storage_conf_yaml_path = sh (returnStdout: true, script: 'source "${WORKSPACE}/pipeline/csi/$JOB_BASE_NAME".params; echo -n $CONFIGURE_STORAGE_YAML_PATH')
    }*/

    stages {
        stage('Configure Storage') {
            when {
                expression {
                    return env.relative_storage_conf_yaml_path != ''
                }
            }
            steps {
                echo "found storage yaml so running ansible to configure storage"
                script {
                    configureStorage(storage_arrays: "${env.STORAGE_ARRAYS}", vars_file: "${env.STORAGE_CONF_YAML}")
                }
            }
        }
        stage ('CSI-controller: build and start controller server and csi sanity tests') {
            steps {
                sh  './scripts/ci/run_community_csi_test.sh'
            }
        }
    }

    post {
        always {
            sh './scripts/ci/community_csi_test_cleanup.sh csi-controller'
            sh './scripts/ci/community_csi_test_cleanup.sh csi-sanity-test'
            archiveArtifacts "${env.CONTROLLER_LOGS}"
	        sh 'ls build/reports'
            junit 'build/reports/*.xml'
            sh '[ -d build/reports ] && rm -rf build/reports'
            sh '[ -f `${env.CONTROLLER_LOGS}` ] && rm -f csi_controller_logs'

        }
    }
}
