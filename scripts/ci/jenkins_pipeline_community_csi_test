pipeline {
    agent {
        label 'docker-engine'
    }
    environment {
        CONTROLLER_LOGS = "csi_controller_logs"
    }

    stages {
        stage('Environment Setup') {
            agent {
                    label 'ansible_rhel73'
                }
            steps {
                script{
                    if (env.XAVILIB_BRANCH == null) {
                        env.XAVILIB_BRANCH = 'develop'
                    }
                    echo "checking out XAVI"
                    xaviCheckOutScm(path: 'testing/', name: 'xavi', branch: "${env.XAVILIB_BRANCH}")

                    env.pwd = sh(returnStdout: true, script: 'pwd').trim()
                    echo " env.pwd  ${env.pwd}"

                    //env.relative_storage_conf_yaml_path = sh (returnStdout: true, script: 'source "$pwd/scripts/ci/$JOB_BASE_NAME".params; echo -n $CONFIGURE_STORAGE_YAML_PATH')
                    //echo " env.relative_storage_conf_yaml_path  ${env.relative_storage_conf_yaml_path}"

                    env.new_conf_yaml_name = "${env.pwd}/scripts/ci/storage_conf_new.yaml"
                    sh 'echo new conf yaml ${new_conf_yaml_name}'

                    env.full_storage_conf_yaml_path = "${env.pwd}/scripts/ci/storage_conf.yaml"

                    // this should replace the username and password env vars in the yaml file.
                    sh '''
                        ( echo "cat <<EOF > ${new_conf_yaml_name}";
                          cat ${full_storage_conf_yaml_path};
                          echo "EOF";
                        ) > ${new_conf_yaml_name}
                        . ${new_conf_yaml_name}
                        cat ${new_conf_yaml_name}
                    '''

                    echo "new_conf_yaml_name"
                    sh 'cat ${new_conf_yaml_name}'
                    echo "full_storage_conf_yaml_path"
                    sh 'cat ${full_storage_conf_yaml_path}'

                    env.POOL_NAME = sh(returnStdout: true, script: 'cat ${full_storage_conf_yaml_path}  | grep " pools:" -A 4 | grep name | cut -d ":" -f2').trim()
                    echo "pool name ${POOL_NAME}"


                    echo " env.full_storage_conf_yaml_path  ${env.full_storage_conf_yaml_path}"
                }
            }
        }
       stage('Configure Storage') {
            agent {
                label 'ansible_rhel73'
            }
           /* when {
                expression {
                    return env.relative_storage_conf_yaml_path != ''
                }
            }*/
           steps {
                echo "setting up env vars"
                //env.relative_storage_conf_yaml_path = sh (returnStdout: true, script: 'source "${WORKSPACE}/pipeline/csi/$JOB_BASE_NAME".params; echo -n $CONFIGURE_STORAGE_YAML_PATH')
                echo "${env.relative_storage_conf_yaml_path}"
                //env.full_storage_conf_yaml_path = "${WORKSPACE}/${relative_storage_conf_yaml_path}"
                echo "${env.full_storage_conf_yaml_path}"

                echo "found storage yaml so running ansible to configure storage"
                script {
                    configureStorage(storage_arrays: "${env.STORAGE_ARRAYS}", vars_file: "${env.new_conf_yaml_name}")
                }
           }
        }

        stage ('CSI-controller: build and start controller server and csi sanity tests') {
            steps {
                sh  './scripts/ci/run_community_csi_test.sh'
            }
        }
    }

   post {
        always {
            sh './scripts/ci/community_csi_test_cleanup.sh csi-controller'
            sh './scripts/ci/community_csi_test_cleanup.sh csi-sanity-test'
            sh 'python ./scripts/ci/cleanup_volumes.py'
            archiveArtifacts "${env.CONTROLLER_LOGS}"
	        sh 'ls build/reports'
            junit 'build/reports/*.xml'
            sh '[ -d build/reports ] && rm -rf build/reports'
            sh '[ -f `${env.CONTROLLER_LOGS}` ] && rm -f csi_controller_logs'

        }
    }
}
